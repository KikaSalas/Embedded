<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\testsubmodule.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\testsubmodule.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Oct 23 09:24:57 2019
<BR><P>
<H3>Maximum Stack Usage =       1472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GPS_thread() &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f4]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22d]">mbed_assert_internal</a><BR>
 <LI><a href="#[2aa]">mbed_error_vfprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[2b5]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22d]">mbed_assert_internal</a><BR>
 <LI><a href="#[1da]">error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2aa]">mbed_error_vfprintf</a><BR>
 <LI><a href="#[1f5]">sleep_manager_lock_deep_sleep_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[2a4]">core_util_atomic_incr_u16</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[187]">mbed_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ab]">exit</a><BR>
 <LI><a href="#[2a9]">print_error_report</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ce]">mbed_error_printf</a><BR>
 <LI><a href="#[2a8]">handle_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[210]">sleep_manager_unlock_deep_sleep_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[2a3]">core_util_atomic_decr_u16</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">core_util_critical_section_exit</a><BR>
 <LI><a href="#[318]">ticker_read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[197]">ticker_read_us</a><BR>
 <LI><a href="#[2b4]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22d]">mbed_assert_internal</a><BR>
 <LI><a href="#[2b2]">gpio_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b5]">pin_function</a><BR>
 <LI><a href="#[28e]">gpio_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d8]">Set_GPIO_Clock</a><BR>
 <LI><a href="#[20a]">__cxa_guard_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22d]">mbed_assert_internal</a><BR>
 <LI><a href="#[207]">__cxa_guard_acquire</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22d]">mbed_assert_internal</a><BR>
 <LI><a href="#[208]">DirectSerial::DirectSerial(PinName, PinName, int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[226]">serial_init</a><BR>
 <LI><a href="#[227]">serial_baud</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b2]">HAL_RCC_OscConfig</a><BR>
 <LI><a href="#[1b0]">HAL_RCCEx_PeriphCLKConfig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">HAL_GetTick</a><BR>
 <LI><a href="#[1c5]">UART_CheckIdleState</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">HAL_GetTick</a><BR>
 <LI><a href="#[1dc]">UART_WaitOnFlagUntilTimeout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">HAL_GetTick</a><BR>
 <LI><a href="#[226]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22d]">mbed_assert_internal</a><BR>
 <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[23]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[68]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">osRtxIdleThread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[48]">&lang;Func4&rang;</a> from .\build\serialbase.o(i.<Func4>) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[23]">ADC1_COMP_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel2_3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_5_6_7_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">EXTI0_1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">EXTI2_3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">EXTI4_15_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2d]">I2C1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2e]">I2C2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2b]">I2C3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[44]">I2C_DMAAbort</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_DMAAbort) referenced from .\build\stm32l0xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[42]">I2C_Master_ISR_DMA</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_DMA) referenced from .\build\stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
 <LI><a href="#[40]">I2C_Master_ISR_IT</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT) referenced from .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Receive_IT)
 <LI><a href="#[40]">I2C_Master_ISR_IT</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT) referenced from .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Transmit_IT)
 <LI><a href="#[43]">I2C_Slave_ISR_DMA</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_DMA) referenced from .\build\stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
 <LI><a href="#[3f]">I2C_Slave_ISR_IT</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_IT) referenced from .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_EnableListen_IT)
 <LI><a href="#[3f]">I2C_Slave_ISR_IT</a> from .\build\stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_IT) referenced from .\build\stm32l0xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[24]">LPTIM1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">RCC_CRS_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[33]">RNG_LPUART1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[19]">RTC_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[36]">SystemInit</a> from .\build\system_clock.o(i.SystemInit) referenced from .\build\startup_stm32l072xx.o(.text)
 <LI><a href="#[2a]">TIM21_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2c]">TIM22_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[28]">TIM6_DAC_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[29]">TIM7_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">TSC_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[41]">UART_DMAAbortOnError</a> from .\build\stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from .\build\stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[31]">USART1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[25]">USART4_5_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[34]">USB_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[59]">GPS_thread()</a> from .\build\threadgps.o(i._Z10GPS_threadv) referenced from .\build\main.o(i.main)
 <LI><a href="#[5a]">I2C_thread()</a> from .\build\threadi2c.o(i._Z10I2C_threadv) referenced from .\build\main.o(i.main)
 <LI><a href="#[45]">read_colour()</a> from .\build\threadi2c.o(i._Z11read_colourv) referenced from .\build\threadi2c.o(i._Z10I2C_threadv)
 <LI><a href="#[5b]">ANALOG_thread()</a> from .\build\threadanalog.o(i._Z13ANALOG_threadv) referenced from .\build\main.o(i.main)
 <LI><a href="#[f]">default_idle_hook()</a> from .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv) referenced 2 times from .\build\mbed_rtx_idle.o(.data)
 <LI><a href="#[8a]">DirectSerial::read(void*, unsigned)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4readEPvj) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[8c]">DirectSerial::seek(long, int)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4seekEli) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[8f]">DirectSerial::size()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4sizeEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[8d]">DirectSerial::close()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial5closeEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[8b]">DirectSerial::write(const void*, unsigned)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial5writeEPKvj) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[8e]">DirectSerial::isatty()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial6isattyEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[46]">DirectSerial::~DirectSerial()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[46]">DirectSerial::~DirectSerial()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev) referenced from .\build\mbed_retarget.o(i._Z11get_consolei)
 <LI><a href="#[92]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[91]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[49]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[89]">mbed::SerialBase::interrupt_handler_asynch()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv) referenced from .\build\serialbase.o(.constdata)
 <LI><a href="#[93]">mbed::SerialBase::lock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[94]">mbed::SerialBase::unlock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[95]">mbed::SerialBase::~SerialBase()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[4b]">mbed::TimerEvent::irq(unsigned)</a> from .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from .\build\timerevent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[96]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev) referenced from .\build\timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[52]">mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[7b]">mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev) referenced from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev)
 <LI><a href="#[53]">mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()</a> from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[81]">mbed::I2C::irq_handler_asynch()</a> from .\build\i2c.o(i._ZN4mbed3I2C18irq_handler_asynchEv) referenced from .\build\i2c.o(.constdata)
 <LI><a href="#[97]">mbed::I2C::lock()</a> from .\build\i2c.o(i._ZN4mbed3I2C4lockEv) referenced from .\build\i2c.o(.constdata__ZTVN4mbed3I2CE)
 <LI><a href="#[98]">mbed::I2C::unlock()</a> from .\build\i2c.o(i._ZN4mbed3I2C6unlockEv) referenced from .\build\i2c.o(.constdata__ZTVN4mbed3I2CE)
 <LI><a href="#[4f]">mbed::I2C::~I2C()</a> from .\build\i2c.o(i._ZN4mbed3I2CD1Ev) referenced from .\build\i2c.o(.constdata__ZTVN4mbed3I2CE)
 <LI><a href="#[4f]">mbed::I2C::~I2C()</a> from .\build\i2c.o(i._ZN4mbed3I2CD1Ev) referenced from .\build\threadi2c.o(i.__sti___13_threadI2C_cpp_misensor)
 <LI><a href="#[99]">mbed::Serial::lock()</a> from .\build\serial.o(i._ZN4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9b]">mbed::Serial::_getc()</a> from .\build\serial.o(i._ZN4mbed6Serial5_getcEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9c]">mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZN4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9a]">mbed::Serial::unlock()</a> from .\build\serial.o(i._ZN4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[54]">mbed::Serial::~Serial()</a> from .\build\serial.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[54]">mbed::Serial::~Serial()</a> from .\build\serial.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_pc)
 <LI><a href="#[a8]">mbed::Stream::lock()</a> from .\build\stream.o(i._ZN4mbed6Stream4lockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9d]">mbed::Stream::read(void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream4readEPvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9d]">mbed::Stream::read(void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream4readEPvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9f]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9f]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a2]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a2]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a0]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a0]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9e]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9e]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a1]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a1]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a9]">mbed::Stream::unlock()</a> from .\build\stream.o(i._ZN4mbed6Stream6unlockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a7]">mbed::Stream::~Stream__sub_object()</a> from .\build\stream.o(i._ZN4mbed6StreamD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[aa]">mbed::Ticker::handler()</a> from .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from .\build\ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[50]">mbed::Ticker::~Ticker()</a> from .\build\ticker.o(i._ZN4mbed6TickerD1Ev) referenced from .\build\ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[50]">mbed::Ticker::~Ticker()</a> from .\build\ticker.o(i._ZN4mbed6TickerD1Ev) referenced from .\build\threadi2c.o(i.__sti___13_threadI2C_cpp_misensor)
 <LI><a href="#[ab]">mbed::AnalogIn::lock()</a> from .\build\threadanalog.o(i._ZN4mbed8AnalogIn4lockEv) referenced from .\build\threadanalog.o(.constdata__ZTVN4mbed8AnalogInE)
 <LI><a href="#[ac]">mbed::AnalogIn::unlock()</a> from .\build\threadanalog.o(i._ZN4mbed8AnalogIn6unlockEv) referenced from .\build\threadanalog.o(.constdata__ZTVN4mbed8AnalogInE)
 <LI><a href="#[51]">mbed::AnalogIn::~AnalogIn()</a> from .\build\threadanalog.o(i._ZN4mbed8AnalogInD1Ev) referenced from .\build\threadanalog.o(.constdata__ZTVN4mbed8AnalogInE)
 <LI><a href="#[51]">mbed::AnalogIn::~AnalogIn()</a> from .\build\threadanalog.o(i._ZN4mbed8AnalogInD1Ev) referenced from .\build\threadanalog.o(i.__sti___16_threadANALOG_cpp_soilmois)
 <LI><a href="#[ae]">void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</a> from .\build\serialbase.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi) referenced from .\build\serialbase.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[b0]">void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</a> from .\build\serialbase.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv) referenced from .\build\serialbase.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[af]">void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</a> from .\build\serialbase.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv) referenced from .\build\serialbase.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[b1]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from .\build\arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[b3]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from .\build\arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[b2]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from .\build\arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[4a]">mbed::Callback&lang;void()&rang;::~Callback()</a> from .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
 <LI><a href="#[ad]">mbed::FileBase::~FileBase()</a> from .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev) referenced from .\build\filebase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[4d]">rtos::Thread::_thunk(void*)</a> from .\build\thread.o(i._ZN4rtos6Thread6_thunkEPv) referenced from .\build\thread.o(i._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE)
 <LI><a href="#[4e]">rtos::Thread::~Thread()</a> from .\build\thread.o(i._ZN4rtos6ThreadD1Ev) referenced from .\build\thread.o(.constdata__ZTVN4rtos6ThreadE)
 <LI><a href="#[4e]">rtos::Thread::~Thread()</a> from .\build\thread.o(i._ZN4rtos6ThreadD1Ev) referenced from .\build\threadgps.o(i.__sti___13_threadGPS_cpp_469c9a64)
 <LI><a href="#[4e]">rtos::Thread::~Thread()</a> from .\build\thread.o(i._ZN4rtos6ThreadD1Ev) referenced from .\build\threadi2c.o(i.__sti___13_threadI2C_cpp_misensor)
 <LI><a href="#[4e]">rtos::Thread::~Thread()</a> from .\build\thread.o(i._ZN4rtos6ThreadD1Ev) referenced from .\build\threadanalog.o(i.__sti___16_threadANALOG_cpp_soilmois)
 <LI><a href="#[47]">CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</a> from .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[4c]">CThunk&lang;mbed::I2C&rang;::trampoline(mbed::I2C*, void*, void(mbed::I2C::**)(void*))</a> from .\build\i2c.o(t._ZN6CThunkIN4mbed3I2CEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from .\build\i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_)
 <LI><a href="#[a5]">thunk{-188} to mbed::Serial::lock()</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a4]">thunk{-188} to mbed::Serial::_getc()</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial5_getcEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a3]">thunk{-188} to mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a6]">thunk{-188} to mbed::Serial::unlock()</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[90]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_p.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[90]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_p.l(pure_virt.o)(i.__cxa_pure_virtual) referenced from .\build\timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[90]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_p.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 2 times from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[b9]">__main</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__main.o)(!!!main) referenced from .\build\startup_stm32l072xx.o(.text)
 <LI><a href="#[b7]">__sti___13_threadGPS_cpp_469c9a64</a> from .\build\threadgps.o(i.__sti___13_threadGPS_cpp_469c9a64) referenced from .\build\threadgps.o(.init_array)
 <LI><a href="#[b8]">__sti___13_threadI2C_cpp_misensor</a> from .\build\threadi2c.o(i.__sti___13_threadI2C_cpp_misensor) referenced from .\build\threadi2c.o(.init_array)
 <LI><a href="#[b6]">__sti___16_threadANALOG_cpp_soilmois</a> from .\build\threadanalog.o(i.__sti___16_threadANALOG_cpp_soilmois) referenced from .\build\threadanalog.o(.init_array)
 <LI><a href="#[b4]">__sti___7_SPI_cpp_ab1f1164</a> from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164) referenced from .\build\spi.o(.init_array)
 <LI><a href="#[b5]">__sti___8_main_cpp_pc</a> from .\build\main.o(i.__sti___8_main_cpp_pc) referenced from .\build\main.o(.init_array)
 <LI><a href="#[3e]">_fputc$unlocked</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fputc.o)(i.fputc) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char_file_locked.o)(.text)
 <LI><a href="#[38]">_get_lc_ctype</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(lc_ctype_c.o)(locale$$code) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_ctype_table.o)(.text)
 <LI><a href="#[7c]">_printf_fp_dec_real</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_dec.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(printf1.o)(x$fpl$printf1)
 <LI><a href="#[7d]">_printf_fp_hex_real</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_hex.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(printf2.o)(x$fpl$printf2)
 <LI><a href="#[3a]">_printf_input_char</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char_common.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char_common.o)(.text)
 <LI><a href="#[3c]">_sbackspace</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strtod.o)(.text)
 <LI><a href="#[7f]">_scanf_really_hex_real</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_hexfp.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(scanf2.o)(x$fpl$scanf2)
 <LI><a href="#[80]">_scanf_really_infnan</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_infnan.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(scanf2.o)(x$fpl$scanf2)
 <LI><a href="#[7e]">_scanf_really_real</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_fp.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(scanf1.o)(x$fpl$scanf1)
 <LI><a href="#[3b]">_sgetc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strtod.o)(.text)
 <LI><a href="#[39]">_snputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_snputc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(vsnprintf.o)(.text)
 <LI><a href="#[55]">i2c1_irq</a> from .\build\i2c_api.o(i.i2c1_irq) referenced from .\build\i2c_api.o(i.i2c_get_irq_handler)
 <LI><a href="#[56]">i2c2_irq</a> from .\build\i2c_api.o(i.i2c2_irq) referenced from .\build\i2c_api.o(i.i2c_get_irq_handler)
 <LI><a href="#[57]">i2c3_irq</a> from .\build\i2c_api.o(i.i2c3_irq) referenced from .\build\i2c_api.o(i.i2c_get_irq_handler)
 <LI><a href="#[3d]">isspace</a> from .\build\greentea_test_env.o(i.isspace) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strtod.o)(.text)
 <LI><a href="#[76]">lpuart1_irq</a> from .\build\serial_device.o(i.lpuart1_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[35]">mbed_fault_handler</a> from .\build\mbed_rtx_fault_handler.o(i.mbed_fault_handler) referenced from .\build\except.o(.text)
 <LI><a href="#[68]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(i.osRtxIdleThread) referenced from .\build\rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[77]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[78]">osRtxSemaphorePostProcess</a> from .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[7a]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(i.osRtxThreadPostProcess) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[69]">osRtxTimerThread</a> from .\build\rtx_timer.o(i.osRtxTimerThread) referenced from .\build\rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[6a]">osRtxTimerTick</a> from .\build\rtx_timer.o(i.osRtxTimerTick) referenced from .\build\rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[79]">osThreadExit</a> from .\build\rtx_thread.o(i.osThreadExit) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[5c]">pre_main</a> from .\build\mbed_boot.o(i.pre_main) referenced from .\build\mbed_boot.o(i.mbed_start_main)
 <LI><a href="#[5d]">svcRtxDelay</a> from .\build\rtx_delay.o(i.svcRtxDelay) referenced from .\build\rtx_delay.o(i.osDelay)
 <LI><a href="#[5e]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(i.svcRtxKernelGetState) referenced from .\build\rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[5f]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(i.svcRtxKernelInitialize) referenced from .\build\rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[60]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(i.svcRtxKernelStart) referenced from .\build\rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[61]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[62]">svcRtxMessageQueueNew</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[63]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from .\build\rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[64]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(i.svcRtxMutexAcquire) referenced from .\build\rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[65]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(i.svcRtxMutexDelete) referenced from .\build\rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[66]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(i.svcRtxMutexNew) referenced from .\build\rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[67]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(i.svcRtxMutexRelease) referenced from .\build\rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[6b]">svcRtxSemaphoreDelete</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete) referenced from .\build\rtx_semaphore.o(i.osSemaphoreDelete)
 <LI><a href="#[6c]">svcRtxSemaphoreNew</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from .\build\rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[6d]">svcRtxSemaphoreRelease</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from .\build\rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[6f]">svcRtxThreadExit</a> from .\build\rtx_thread.o(i.svcRtxThreadExit) referenced from .\build\rtx_thread.o(i.osThreadExit)
 <LI><a href="#[70]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(i.svcRtxThreadGetId) referenced from .\build\rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[6e]">svcRtxThreadNew</a> from .\build\rtx_thread.o(i.svcRtxThreadNew) referenced from .\build\rtx_thread.o(i.osThreadContextNew)
 <LI><a href="#[71]">svcRtxThreadTerminate</a> from .\build\rtx_thread.o(i.svcRtxThreadTerminate) referenced from .\build\rtx_thread.o(i.osThreadTerminate)
 <LI><a href="#[10]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(i.ticker_irq_handler) referenced 2 times from .\build\mbed_us_ticker_api.o(.data)
 <LI><a href="#[58]">timer_irq_handler</a> from .\build\us_ticker.o(i.timer_irq_handler) referenced from .\build\us_ticker.o(i.init_16bit_timer)
 <LI><a href="#[72]">uart1_irq</a> from .\build\serial_device.o(i.uart1_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[73]">uart2_irq</a> from .\build\serial_device.o(i.uart2_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[74]">uart4_irq</a> from .\build\serial_device.o(i.uart4_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[75]">uart5_irq</a> from .\build\serial_device.o(i.uart5_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[85]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(i.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[84]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(i.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[87]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(i.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[88]">us_ticker_get_info</a> from .\build\us_ticker.o(i.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[82]">us_ticker_init</a> from .\build\us_ticker.o(i.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[83]">us_ticker_read</a> from .\build\us_ticker.o(i.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[86]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(i.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b9]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[31e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[31f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[320]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[111]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c2]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c3]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[c5]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c7]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[c9]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[ca]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[cb]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[cd]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[ce]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[d0]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[d1]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[d2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d4]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d6]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[d8]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[d9]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[da]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[dc]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[de]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[df]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e1]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e3]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[e5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[30a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[321]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[322]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[323]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[324]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[325]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[326]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[327]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[328]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[329]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[32a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[32b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[32c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[32d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[32e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[32f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[330]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[331]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[332]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[333]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[334]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[335]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[336]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[337]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[126]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[338]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[339]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(maybetermalloc2.o)(.emb_text), UNUSED)

<P><STRONG><a name="[f2]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[f3]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[f4]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[f1]"></a>Fault_Handler</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, .\build\irq_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\irq_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\irq_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[33a]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_malloc_internal</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[fd]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[ff]"></a>_free_internal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[100]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(llshl.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[33c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(llushr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>

<P><STRONG><a name="[33d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(llmul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[33e]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(llmul.o)(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(lludiv.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[33f]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(lludiv.o)(.text), UNUSED)

<P><STRONG><a name="[101]"></a>vfprintf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(vfprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>

<P><STRONG><a name="[103]"></a>vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>

<P><STRONG><a name="[106]"></a>__c89vfprintf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(c89vfprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[108]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[109]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[107]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[cf]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[10e]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d5]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[dd]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[c6]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[10f]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[112]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(atoi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[113]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strtol.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[115]"></a>setbuf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(setbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[340]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[117]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[11b]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fgetc_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fgetc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
</UL>

<P><STRONG><a name="[11d]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fclose_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[11e]"></a>_do_fflush</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[120]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[123]"></a>freopen</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[124]"></a>fopen</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
</UL>

<P><STRONG><a name="[27b]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strchr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
</UL>

<P><STRONG><a name="[262]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strspn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[21c]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strstr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[21a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[25b]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[341]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.text), UNUSED)

<P><STRONG><a name="[128]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[127]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[342]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(unsigned, osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[343]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[295]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[344]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(aeabi_sdiv.o)(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(aeabi_sdiv.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_hw_reset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[345]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(aeabi_sdiv.o)(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(aeabi_sdiv.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[346]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_p.l(aeabi_vec_dtor_noexceptions.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()
</UL>

<P><STRONG><a name="[201]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(d2f.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[347]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(d2f.o)(.text), UNUSED)

<P><STRONG><a name="[348]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[12e]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[12f]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ddiv.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[131]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ddiv.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[130]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ddiv.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[222]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dfixui.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[349]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dfixui.o)(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dflti.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dflti.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[34a]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dflti.o)(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dflti.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[34b]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dflti.o)(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dmul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[34c]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dmul.o)(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dscalbn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(f2d.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[34d]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(f2d.o)(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ffixi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[34e]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ffixi.o)(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ffixui.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[34f]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ffixui.o)(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ffixul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[350]"></a>_ll_ufrom_f</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(ffixul.o)(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fflti.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fflti.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccZ()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccY()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccX()
</UL>

<P><STRONG><a name="[351]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fflti.o)(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fflti.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>

<P><STRONG><a name="[352]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fflti.o)(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fscalbn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccZ()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccY()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccX()
</UL>

<P><STRONG><a name="[353]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[fe]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[ea]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rt_locale_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[354]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[355]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[13a]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e8]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[13c]"></a>__Heap_Initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_init_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_init_mt.o)(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_rserrno.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __read_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[13e]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_rserrno.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[10a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[10d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c4]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[356]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_dec.o)(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[104]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[105]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[39]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_snputc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e2]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[149]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d7]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[14b]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d3]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[db]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[14c]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_chval.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3b]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_strtoul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14f]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strtod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[150]"></a>_readbuf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[157]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[153]"></a>__filbuf</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[2ad]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(filbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>

<P><STRONG><a name="[357]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(filbuf.o)(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__flsbuf</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[2b0]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[358]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[359]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[152]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[15b]"></a>_writebuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[118]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[154]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[116]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ef]"></a>_initio</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[15f]"></a>_terminateio</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[160]"></a>__rt_SIGPVFN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_pvfn_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[10c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(rtudiv10.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[163]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dcmpin.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2ae]"></a>_drem</STRONG> (Thumb, 368 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(drem.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _drem
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[17a]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(sys_wrch.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[173]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(sys_exit.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[139]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_extend_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[144]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[7d]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[146]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[102]"></a>_printf_char_file</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char_file_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>

<P><STRONG><a name="[167]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e4]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[e6]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[7e]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[140]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[141]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[143]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[16b]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[142]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[16c]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[15c]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[35a]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[156]"></a>_flushlinebuffered</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(flushlinebuffered_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[14a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_wcrtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[162]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_exit.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[15e]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[13b]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[161]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_pvfn_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[164]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(cmpret.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[165]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(dnan2.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[35b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(indicate_semi.o)(.text), UNUSED)

<P><STRONG><a name="[178]"></a>_terminate_alloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[176]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[174]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[175]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[177]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(retnan.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[179]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_final_mt.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[7f]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_hexfp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[80]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[35e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__dczerorl2.o)(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__dczerorl2.o)(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; rtos::Thread::start(mbed::Callback&lang;void()&rang;) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[185]"></a>EvrRtxKernelError</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EvrRtxKernelError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[188]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[189]"></a>EvrRtxMutexError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[18a]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[18b]"></a>EvrRtxThreadError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[18c]"></a>EvrRtxThreadExit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[18f]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_ADCEx_Calibration_GetValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[190]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[191]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[29d]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[192]"></a>HAL_ADC_Init</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[193]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[194]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[195]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[184]"></a>HAL_GetTick</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\hal_tick_overrides.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>

<P><STRONG><a name="[2be]"></a>HAL_I2CEx_EnableFastModePlus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_EnableFastModePlus))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>

<P><STRONG><a name="[198]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\i2c_api.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_AbortCpltCallback &rArr; i2c_ev_err_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[19a]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c3_irq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2_irq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_irq
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c3_irq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c2_irq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_irq
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
</UL>

<P><STRONG><a name="[19c]"></a>HAL_I2C_EnableListen_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_EnableListen_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2C_EnableListen_IT &rArr; I2C_Enable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>

<P><STRONG><a name="[19e]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\i2c_api.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_I2C_ListenCpltCallback &rArr; HAL_I2C_EnableListen_IT &rArr; I2C_Enable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Sequential_Receive_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_I2C_Master_Sequential_Receive_IT</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_Master_Sequential_Receive_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_I2C_Master_Sequential_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_Master_Sequential_Transmit_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_InitTick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\hal_tick_overrides.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_disable
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_RCCEx_CRSConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_CRSConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr;  HAL_GetTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[1af]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1146 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_UARTEx_DisableClockStopMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_DisableClockStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_UARTEx_DisableStopMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_DisableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_UARTEx_EnableClockStopMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_EnableClockStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[1be]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\serial_device.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2fe]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[315]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[314]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d4]"></a>OS_Tick_Setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d5]"></a>SetSysClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\system_clock.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1d6]"></a>SetSysClock_PLL_HSI</STRONG> (Thumb, 194 bytes, Stack size 152 bytes, .\build\system_clock.o(i.SetSysClock_PLL_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1d8]"></a>Set_GPIO_Clock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Set_GPIO_Clock &rArr; error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[1db]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, .\build\system_stm32l0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\build\system_clock.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c5]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = UART_CheckIdleState &rArr;  HAL_GetTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c4]"></a>UART_SetConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1dc]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr;  HAL_GetTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[59]"></a>GPS_thread()</STRONG> (Thumb, 268 bytes, Stack size 352 bytes, .\build\threadgps.o(i._Z10GPS_threadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472 + Unknown Stack Size
<LI>Call Chain = GPS_thread() &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::Adafruit_GPS(mbed::Serial*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::lastNMEA()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::begin(int)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::read()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::newNMEAreceived()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::sendCommand(char*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5a]"></a>I2C_thread()</STRONG> (Thumb, 780 bytes, Stack size 320 bytes, .\build\threadi2c.o(i._Z10I2C_threadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = I2C_thread() &rArr; MMA8451Q::getAccZ() &rArr; MMA8451Q::getAccAxis(unsigned char) &rArr; MMA8451Q::readRegs(int, unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::frequency(int)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMax(int, int, int)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::MMA8451Q(PinName, PinName, int)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccZ()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccY()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccX()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[45]"></a>read_colour()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\threadi2c.o(i._Z11read_colourv))
<BR>[Address Reference Count : 1]<UL><LI> threadi2c.o(i._Z10I2C_threadv)
</UL>
<P><STRONG><a name="[5b]"></a>ANALOG_thread()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\threadanalog.o(i._Z13ANALOG_threadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = ANALOG_thread() &rArr; mbed::AnalogIn::operator float() &rArr; analogin_read &rArr; adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::operator float()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[202]"></a>getMax(int, int, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\threadi2c.o(i._Z6getMaxiii))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[223]"></a>Adafruit_GPS::common_init()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS11common_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GPS::common_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::Adafruit_GPS(mbed::Serial*)
</UL>

<P><STRONG><a name="[1e4]"></a>Adafruit_GPS::sendCommand(char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS11sendCommandEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Adafruit_GPS::sendCommand(char*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1e9]"></a>Adafruit_GPS::newNMEAreceived()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS15newNMEAreceivedEv))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1e8]"></a>Adafruit_GPS::read()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Adafruit_GPS::read() &rArr; mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1e3]"></a>Adafruit_GPS::begin(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS5beginEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Adafruit_GPS::begin(int) &rArr; mbed::SerialBase::baud(int) &rArr; serial_baud &rArr;  HAL_RCC_OscConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1eb]"></a>Adafruit_GPS::parse(char*)</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS5parseEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Adafruit_GPS::parse(char*) &rArr; atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parseHex(char)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1ea]"></a>Adafruit_GPS::lastNMEA()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS8lastNMEAEv))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[21b]"></a>Adafruit_GPS::parseHex(char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPS8parseHexEc))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[1e1]"></a>Adafruit_GPS::Adafruit_GPS(mbed::Serial*)</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPSC1EPN4mbed6SerialE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Adafruit_GPS::Adafruit_GPS(mbed::Serial*) &rArr; Adafruit_GPS::common_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::common_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[360]"></a>Adafruit_GPS::Adafruit_GPS__sub_object(mbed::Serial*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, .\build\mbed_adafruit_gps.o(i._ZN12Adafruit_GPSC1EPN4mbed6SerialE), UNUSED)

<P><STRONG><a name="[8a]"></a>DirectSerial::read(void*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DirectSerial::read(void*, unsigned) &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[8c]"></a>DirectSerial::seek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4seekEli))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[8f]"></a>DirectSerial::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[8d]"></a>DirectSerial::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[8b]"></a>DirectSerial::write(const void*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DirectSerial::write(const void*, unsigned) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[8e]"></a>DirectSerial::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[208]"></a>DirectSerial::DirectSerial(PinName, PinName, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialC1E7PinNameS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[361]"></a>DirectSerial::DirectSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialC1E7PinNameS0_i), UNUSED)

<P><STRONG><a name="[46]"></a>DirectSerial::~DirectSerial()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> mbed_retarget.o(i._Z11get_consolei)
<LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[362]"></a>DirectSerial::~DirectSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev), UNUSED)

<P><STRONG><a name="[203]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\threadi2c.o(i._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[228]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
</UL>

<P><STRONG><a name="[363]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[1f8]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\threadi2c.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[92]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[91]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[22a]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[22b]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[49]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[89]"></a>mbed::SerialBase::interrupt_handler_asynch()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::interrupt_handler_asynch() &rArr; mbed::Callback&lang;void(int)&rang;::call(int) const &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator bool() const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr;  HAL_RCC_OscConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::begin(int)
</UL>

<P><STRONG><a name="[93]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[231]"></a>mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>

<P><STRONG><a name="[94]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[217]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase8readableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::SerialBase::readable()
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::read()
</UL>

<P><STRONG><a name="[235]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[364]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[95]"></a>mbed::SerialBase::~SerialBase()</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[365]"></a>mbed::SerialBase::~SerialBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev), UNUSED)

<P><STRONG><a name="[23b]"></a>mbed::TimerEvent::insert_absolute(unsigned long long)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent15insert_absoluteEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[4b]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[23d]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[23f]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
</UL>

<P><STRONG><a name="[366]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[96]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[241]"></a>mbed::bind_to_fd(mbed::FileHandle*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed10bind_to_fdEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = mbed::bind_to_fd(mbed::FileHandle*) &rArr; reserve_filehandle() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[242]"></a>mbed::transaction_t::transaction_t()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::transaction_t::transaction_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
</UL>

<P><STRONG><a name="[367]"></a>mbed::transaction_t::transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev), UNUSED)

<P><STRONG><a name="[243]"></a>mbed::remove_filehandle(mbed::FileHandle*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed17remove_filehandleEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[205]"></a>mbed::mbed_override_console(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN4mbed21mbed_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[244]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[206]"></a>mbed::mbed_target_override_console(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN4mbed28mbed_target_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[245]"></a>mbed::I2C::unlock_deep_sleep()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2C17unlock_deep_sleepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed::I2C::unlock_deep_sleep() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::irq_handler_asynch()
</UL>

<P><STRONG><a name="[81]"></a>mbed::I2C::irq_handler_asynch()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2C18irq_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::irq_handler_asynch() &rArr; i2c_irq_handler_asynch &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock_deep_sleep()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>mbed::I2C::lock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2C4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::lock() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[1fa]"></a>mbed::I2C::read(int, char*, int, bool)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, .\build\i2c.o(i._ZN4mbed3I2C4readEiPcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::readRegs(int, unsigned char*, int)
</UL>

<P><STRONG><a name="[1f9]"></a>mbed::I2C::write(int, const char*, int, bool)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, .\build\i2c.o(i._ZN4mbed3I2C5writeEiPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::writeRegs(unsigned char*, int)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::readRegs(int, unsigned char*, int)
</UL>

<P><STRONG><a name="[247]"></a>mbed::I2C::aquire()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed3I2C6aquireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::aquire() &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[98]"></a>mbed::I2C::unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2C6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::unlock() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[1f1]"></a>mbed::I2C::frequency(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed3I2C9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::frequency(int) &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[24b]"></a>mbed::I2C::I2C(PinName, PinName)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, .\build\i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::MMA8451Q(PinName, PinName, int)
</UL>

<P><STRONG><a name="[368]"></a>mbed::I2C::I2C__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[4f]"></a>mbed::I2C::~I2C()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2CD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::I2C::~I2C() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2c.o(.constdata__ZTVN4mbed3I2CE)
<LI> threadi2c.o(i.__sti___13_threadI2C_cpp_misensor)
</UL>
<P><STRONG><a name="[369]"></a>mbed::I2C::~I2C__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2CD1Ev), UNUSED)

<P><STRONG><a name="[24c]"></a>mbed::Timer::read_high_resolution_us()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\timer.o(i._ZN4mbed5Timer23read_high_resolution_usEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[1ed]"></a>mbed::Timer::reset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1e6]"></a>mbed::Timer::start()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::start() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[1ec]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::read_ms() &rArr; mbed::Timer::read_high_resolution_us() &rArr; mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[24d]"></a>mbed::Timer::slicetime()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\timer.o(i._ZN4mbed5Timer9slicetimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::slicetime() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
</UL>

<P><STRONG><a name="[1e2]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[36a]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>mbed::Serial::lock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::Serial::lock() &rArr; rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9b]"></a>mbed::Serial::_getc()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9c]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9a]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1e0]"></a>mbed::Serial::Serial(PinName, PinName, const char*, int)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_pc
</UL>

<P><STRONG><a name="[36b]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[54]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> main.o(i.__sti___8_main_cpp_pc)
</UL>
<P><STRONG><a name="[36c]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[218]"></a>mbed::Stream::getc()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6Stream4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::read()
</UL>

<P><STRONG><a name="[a8]"></a>mbed::Stream::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[9d]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\stream.o(i._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[9f]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a2]"></a>mbed::Stream::size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a0]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[9e]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a1]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1ee]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, .\build\stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::sendCommand(char*)
</UL>

<P><STRONG><a name="[a9]"></a>mbed::Stream::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[24e]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[36d]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[a7]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1f6]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\ticker.o(i._ZN4mbed6Ticker5setupEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[255]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, .\build\ticker.o(i._ZN4mbed6Ticker6detachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[aa]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[50]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> threadi2c.o(i.__sti___13_threadI2C_cpp_misensor)
<LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[36e]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[253]"></a>mbed::fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed6fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::bind_to_fd(mbed::FileHandle*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[ab]"></a>mbed::AnalogIn::lock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogIn4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::lock() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threadanalog.o(.constdata__ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[ac]"></a>mbed::AnalogIn::unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogIn6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::unlock() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threadanalog.o(.constdata__ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[257]"></a>mbed::AnalogIn::AnalogIn(PinName)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::AnalogIn(PinName) &rArr; analogin_init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_threadANALOG_cpp_soilmois
</UL>

<P><STRONG><a name="[36f]"></a>mbed::AnalogIn::AnalogIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogInC1E7PinName), UNUSED)

<P><STRONG><a name="[51]"></a>mbed::AnalogIn::~AnalogIn()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogInD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> threadanalog.o(.constdata__ZTVN4mbed8AnalogInE)
<LI> threadanalog.o(i.__sti___16_threadANALOG_cpp_soilmois)
</UL>
<P><STRONG><a name="[370]"></a>mbed::AnalogIn::~AnalogIn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogInD1Ev), UNUSED)

<P><STRONG><a name="[20b]"></a>mbed::AnalogIn::operator float()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\threadanalog.o(i._ZN4mbed8AnalogIncvfEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::operator float() &rArr; analogin_read &rArr; adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANALOG_thread()
</UL>

<P><STRONG><a name="[25e]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filebase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>

<P><STRONG><a name="[25a]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[252]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::FileBase(const char*, mbed::PathType) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[371]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[ad]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[372]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[373]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[254]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[25c]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[25d]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[25f]"></a>mbed::FilePath::file()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2d2]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[260]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2d3]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[261]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[374]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[251]"></a>mbed::mbed_getc(std::__FILE*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed9mbed_getcEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbed::mbed_getc(std::__FILE*) &rArr; fgetc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[263]"></a>rtos::Mutex::constructor(const char*)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, .\build\mutex.o(i._ZN4rtos5Mutex11constructorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[214]"></a>rtos::Mutex::lock(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5Mutex4lockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
</UL>

<P><STRONG><a name="[215]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rtos::Mutex::unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::unlock()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::unlock()
</UL>

<P><STRONG><a name="[24f]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_threadANALOG_cpp_soilmois
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadGPS_cpp_469c9a64
</UL>

<P><STRONG><a name="[375]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev), UNUSED)

<P><STRONG><a name="[250]"></a>rtos::Mutex::~Mutex()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>

<P><STRONG><a name="[376]"></a>rtos::Mutex::~Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexD1Ev), UNUSED)

<P><STRONG><a name="[267]"></a>rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\thread.o(i._ZN4rtos6Thread11constructorE12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*) &rArr; rtos::Thread::constructor(unsigned, osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(unsigned, osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_threadANALOG_cpp_soilmois
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadGPS_cpp_469c9a64
</UL>

<P><STRONG><a name="[268]"></a>rtos::Thread::constructor(unsigned, osPriority_t, unsigned, unsigned char*, const char*)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, .\build\thread.o(i._ZN4rtos6Thread11constructorEj12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtos::Thread::constructor(unsigned, osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
</UL>

<P><STRONG><a name="[1ef]"></a>rtos::Thread::wait(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6Thread4waitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rtos::Thread::wait(unsigned) &rArr; osDelay &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANALOG_thread()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[26a]"></a>rtos::Thread::start(mbed::Callback&lang;void()&rang;)</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, .\build\thread.o(i._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::start(mbed::Callback&lang;void()&rang;) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4d]"></a>rtos::Thread::_thunk(void*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\thread.o(i._ZN4rtos6Thread6_thunkEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::_thunk(void*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE)
</UL>
<P><STRONG><a name="[26f]"></a>rtos::Thread::terminate()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\thread.o(i._ZN4rtos6Thread9terminateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rtos::Thread::terminate() &rArr; rtos::Mutex::unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[4e]"></a>rtos::Thread::~Thread()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6ThreadD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rtos::Thread::~Thread() &rArr; operator delete[] (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> thread.o(.constdata__ZTVN4rtos6ThreadE)
<LI> threadi2c.o(i.__sti___13_threadI2C_cpp_misensor)
<LI> threadanalog.o(i.__sti___16_threadANALOG_cpp_soilmois)
<LI> threadgps.o(i.__sti___13_threadGPS_cpp_469c9a64)
</UL>
<P><STRONG><a name="[377]"></a>rtos::Thread::~Thread__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6ThreadD1Ev), UNUSED)

<P><STRONG><a name="[272]"></a>rtos::Semaphore::constructor(int, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore11constructorEit))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::constructor(int, unsigned short) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
</UL>

<P><STRONG><a name="[26e]"></a>rtos::Semaphore::release()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
</UL>

<P><STRONG><a name="[275]"></a>rtos::Semaphore::Semaphore(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_threadANALOG_cpp_soilmois
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadGPS_cpp_469c9a64
</UL>

<P><STRONG><a name="[378]"></a>rtos::Semaphore::Semaphore__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Ei), UNUSED)

<P><STRONG><a name="[271]"></a>rtos::Semaphore::~Semaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rtos::Semaphore::~Semaphore() &rArr; osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[379]"></a>rtos::Semaphore::~Semaphore__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev), UNUSED)

<P><STRONG><a name="[277]"></a>MMA8451Q::getAccAxis(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mma8451q.o(i._ZN8MMA8451Q10getAccAxisEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::getAccAxis(unsigned char) &rArr; MMA8451Q::readRegs(int, unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::readRegs(int, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccZ()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccY()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccX()
</UL>

<P><STRONG><a name="[1fb]"></a>MMA8451Q::getAccX()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mma8451q.o(i._ZN8MMA8451Q7getAccXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::getAccX() &rArr; MMA8451Q::getAccAxis(unsigned char) &rArr; MMA8451Q::readRegs(int, unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccAxis(unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[1fc]"></a>MMA8451Q::getAccY()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mma8451q.o(i._ZN8MMA8451Q7getAccYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::getAccY() &rArr; MMA8451Q::getAccAxis(unsigned char) &rArr; MMA8451Q::readRegs(int, unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccAxis(unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[1fd]"></a>MMA8451Q::getAccZ()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mma8451q.o(i._ZN8MMA8451Q7getAccZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::getAccZ() &rArr; MMA8451Q::getAccAxis(unsigned char) &rArr; MMA8451Q::readRegs(int, unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccAxis(unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[278]"></a>MMA8451Q::readRegs(int, unsigned char*, int)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, .\build\mma8451q.o(i._ZN8MMA8451Q8readRegsEiPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::readRegs(int, unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::getAccAxis(unsigned char)
</UL>

<P><STRONG><a name="[27a]"></a>MMA8451Q::writeRegs(unsigned char*, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mma8451q.o(i._ZN8MMA8451Q9writeRegsEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::writeRegs(unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::MMA8451Q(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1f0]"></a>MMA8451Q::MMA8451Q(PinName, PinName, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\mma8451q.o(i._ZN8MMA8451QC1E7PinNameS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = MMA8451Q::MMA8451Q(PinName, PinName, int) &rArr; MMA8451Q::writeRegs(unsigned char*, int) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451Q::writeRegs(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[37a]"></a>MMA8451Q::MMA8451Q__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\mma8451q.o(i._ZN8MMA8451QC1E7PinNameS0_i), UNUSED)

<P><STRONG><a name="[21d]"></a>std::strchr(char*, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_adafruit_gps.o(i._ZSt6strchrPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::strchr(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[a5]"></a>thunk{-188} to mbed::Serial::lock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = thunk{-188} to mbed::Serial::lock() &rArr; mbed::Serial::lock() &rArr; rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[a4]"></a>thunk{-188} to mbed::Serial::_getc()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-188} to mbed::Serial::_getc() &rArr; mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[a3]"></a>thunk{-188} to mbed::Serial::_putc(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-188} to mbed::Serial::_putc(int) &rArr; mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[a6]"></a>thunk{-188} to mbed::Serial::unlock()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = thunk{-188} to mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[26d]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = operator delete[] (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[26b]"></a>operator new[] (unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = operator new[] (unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[1df]"></a>operator new(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[316]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\common_functions.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[171]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\fatfilesystem.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[1d9]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\fatfilesystem.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[145]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_atexit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_threadANALOG_cpp_soilmois
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_pc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadGPS_cpp_469c9a64
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_p.l(aeabi_vec_ctor_nocookie_nodtor.o)(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
</UL>

<P><STRONG><a name="[207]"></a>__cxa_guard_acquire</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = __cxa_guard_acquire &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[20a]"></a>__cxa_guard_release</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i.__cxa_guard_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = __cxa_guard_release &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[90]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_p.l(pure_virt.o)(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[27c]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(dunder.o)(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[27e]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(dunder.o)(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[27f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(dunder.o)(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[16f]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(narrow.o)(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[280]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(narrow.o)(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __mathlib_tofloat &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_boot.o(i.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_set_stack_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[17c]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(ldexp.o)(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[f9]"></a>__user_perthread_libspace</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[284]"></a>__user_setup_stackheap</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[110]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[28c]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._mbed_user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ba]"></a>_mutex_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[bb]"></a>_mutex_free</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\mbed_boot.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = _mutex_free &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[bc]"></a>_mutex_initialize</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, .\build\mbed_boot.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = _mutex_initialize &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[bd]"></a>_mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[287]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[119]"></a>_sys_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = _sys_close &rArr; close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[159]"></a>_sys_flen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _sys_flen &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[15a]"></a>_sys_istty</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _sys_istty &rArr; isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[122]"></a>_sys_open</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[151]"></a>_sys_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[155]"></a>_sys_seek</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = _sys_seek &rArr; lseek &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[15d]"></a>_sys_write</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[30b]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(i._ticker_match_interval_passed))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[29c]"></a>adc_read</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, .\build\analogin_device.o(i.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>

<P><STRONG><a name="[258]"></a>analogin_init</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, .\build\analogin_device.o(i.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = analogin_init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
</UL>

<P><STRONG><a name="[259]"></a>analogin_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\analogin_api.o(i.analogin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = analogin_read &rArr; adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::operator float()
</UL>

<P><STRONG><a name="[21e]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(atof.o)(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atof &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[293]"></a>close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[298]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[2a3]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_critical.o(i.core_util_atomic_decr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = core_util_atomic_decr_u16 &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>

<P><STRONG><a name="[2a4]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_critical.o(i.core_util_atomic_incr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = core_util_atomic_incr_u16 &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
</UL>

<P><STRONG><a name="[1f4]"></a>core_util_critical_section_enter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[1f7]"></a>core_util_critical_section_exit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_high_resolution_us()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[297]"></a>core_util_is_isr_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[1da]"></a>error</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, .\build\mbed_error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = error &rArr;  mbed_error_vfprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2ab]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[256]"></a>fdopen</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.fdopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[11c]"></a>_fgetc$unlocked</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fgetc.o)(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[221]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(fmod.o)(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fmod &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::parse(char*)
</UL>

<P><STRONG><a name="[3e]"></a>_fputc$unlocked</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[281]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(frexp.o)(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[30c]"></a>get_uart_index</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, .\build\serial_api.o(i.get_uart_index))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>

<P><STRONG><a name="[196]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[290]"></a>gpio_dir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_dir &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[28e]"></a>gpio_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = gpio_init &rArr;  Set_GPIO_Clock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[229]"></a>gpio_init_out</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2b3]"></a>gpio_init_out_ex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[291]"></a>gpio_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[2b2]"></a>gpio_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = gpio_set &rArr;  pin_function (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[2a5]"></a>hal_critical_section_enter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(i.hal_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_critical_section_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[2a6]"></a>hal_critical_section_exit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(i.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[2b7]"></a>hal_sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\sleep.o(i.hal_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[199]"></a>i2c_ev_err_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\i2c_api.o(i.i2c_ev_err_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_ev_err_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[2bb]"></a>i2c_ev_err_enable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\i2c_api.o(i.i2c_ev_err_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_ev_err_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[24a]"></a>i2c_frequency</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, .\build\i2c_api.o(i.i2c_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_EnableFastModePlus
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::frequency(int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>

<P><STRONG><a name="[2c2]"></a>i2c_get_irq_handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.i2c_get_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_address
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[2c0]"></a>i2c_hw_reset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_hw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_hw_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[19f]"></a>i2c_init</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, .\build\i2c_api.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_hw_reset
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[246]"></a>i2c_irq_handler_asynch</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = i2c_irq_handler_asynch &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::irq_handler_asynch()
</UL>

<P><STRONG><a name="[248]"></a>i2c_read</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, .\build\i2c_api.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = i2c_read &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Receive_IT
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_irq_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_enable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_disable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[1a0]"></a>i2c_slave_address</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_slave_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_slave_address &rArr; HAL_I2C_EnableListen_IT &rArr; I2C_Enable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_irq_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>

<P><STRONG><a name="[249]"></a>i2c_write</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, .\build\i2c_api.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = i2c_write &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_irq_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_enable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_disable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>

<P><STRONG><a name="[1ab]"></a>init_16bit_timer</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\us_ticker.o(i.init_16bit_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_16bit_timer &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2c5]"></a>init_uart</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, .\build\serial_api.o(i.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableClockStopMode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableStopMode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableClockStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[294]"></a>isatty</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i.isatty))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = isatty &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[3d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[289]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ps.l(ldexp.o)(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ldexp &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[29a]"></a>lseek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lseek &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[17f]"></a>$Super$$main</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, .\build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; rtos::Thread::start(mbed::Callback&lang;void()&rang;) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22d]"></a>mbed_assert_internal</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[2ac]"></a>mbed_die</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, .\build\mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; wait_us &rArr; rtos::Thread::wait(unsigned) &rArr; osDelay &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[187]"></a>mbed_error</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\mbed_error.o(i.mbed_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2ce]"></a>mbed_error_printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, .\build\mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
</UL>

<P><STRONG><a name="[2aa]"></a>mbed_error_vfprintf</STRONG> (Thumb, 74 bytes, Stack size 144 bytes, .\build\mbed_board.o(i.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[35]"></a>mbed_fault_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\mbed_rtx_fault_handler.o(i.mbed_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = mbed_fault_handler &rArr; print_context_info &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> except.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[286]"></a>mbed_sdk_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[285]"></a>mbed_set_stack_heap</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.mbed_set_stack_heap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_set_stack_heap
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[288]"></a>mbed_start_main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.mbed_start_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbed_start_main &rArr; osThreadNew &rArr; osThreadContextNew &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[296]"></a>open</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[269]"></a>osDelay</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osDelay &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>

<P><STRONG><a name="[2d6]"></a>osKernelGetState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[292]"></a>osKernelInitialize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[2d1]"></a>osKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[2d9]"></a>osMessageQueueGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[2de]"></a>osMessageQueueNew</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[2df]"></a>osMessageQueuePut</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[265]"></a>osMutexAcquire</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[266]"></a>osMutexDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[264]"></a>osMutexNew</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>

<P><STRONG><a name="[20e]"></a>osMutexRelease</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[28b]"></a>osRtxErrorNotify</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[68]"></a>osRtxIdleThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[317]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, .\build\rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[2f5]"></a>osRtxMemoryFree</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[312]"></a>osRtxMemoryInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\build\rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2e0]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2e5]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[313]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2ea]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[f5]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2dd]"></a>osRtxPostProcess</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxPostProcess &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[2ef]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[2ec]"></a>osRtxThreadDispatch</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[2e6]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[2f7]"></a>osRtxThreadListPut</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2f0]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[2f6]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[2f1]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, .\build\rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[2e8]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[2f9]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[2fa]"></a>osRtxThreadStartup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2f3]"></a>osRtxThreadSwitch</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[2fb]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[2e7]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[f6]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, .\build\rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[69]"></a>osRtxTimerThread</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[276]"></a>osSemaphoreDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[273]"></a>osSemaphoreNew</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[274]"></a>osSemaphoreRelease</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>

<P><STRONG><a name="[303]"></a>osThreadContextNew</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.osThreadContextNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osThreadContextNew &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[79]"></a>osThreadExit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[18d]"></a>osThreadGetId</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[26c]"></a>osThreadNew</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadNew &rArr; osThreadContextNew &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[270]"></a>osThreadTerminate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[2b5]"></a>pin_function</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, .\build\pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[2b4]"></a>pin_mode</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[308]"></a>pinmap_find_function</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_function))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
</UL>

<P><STRONG><a name="[309]"></a>pinmap_find_peripheral</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[29f]"></a>pinmap_function</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pinmap_function &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[2c1]"></a>pinmap_merge</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pinmap_merge &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[29e]"></a>pinmap_peripheral</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pinmap_peripheral &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2a0]"></a>pinmap_pinout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = pinmap_pinout &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[5c]"></a>pre_main</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.pre_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = pre_main &rArr; main &rArr; $Super$$main &rArr; rtos::Thread::start(mbed::Callback&lang;void()&rang;) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_boot.o(i.mbed_start_main)
</UL>
<P><STRONG><a name="[2d0]"></a>print_context_info</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, .\build\mbed_rtx_fault_handler.o(i.print_context_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = print_context_info &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[299]"></a>read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[2e3]"></a>rtos_idle_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[227]"></a>serial_baud</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, .\build\serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = serial_baud &rArr;  HAL_RCC_OscConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[224]"></a>serial_getc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\serial_device.o(i.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::read(void*, unsigned)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[226]"></a>serial_init</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_index
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[238]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serial_device.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[22e]"></a>serial_irq_handler_asynch</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, .\build\serial_device.o(i.serial_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_irq_handler_asynch &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[233]"></a>serial_irq_set</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, .\build\serial_device.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_irq_set
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[225]"></a>serial_putc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serial_device.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::write(const void*, unsigned)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[234]"></a>serial_readable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[30d]"></a>serial_rx_abort_asynch</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, .\build\serial_device.o(i.serial_rx_abort_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_rx_abort_asynch
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[310]"></a>serial_writable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[1f5]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[20f]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[210]"></a>sleep_manager_unlock_deep_sleep_internal</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_unlock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = sleep_manager_unlock_deep_sleep_internal &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock_deep_sleep()
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[6e]"></a>svcRtxThreadNew</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, .\build\rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadContextNew)
</UL>
<P><STRONG><a name="[18e]"></a>thread_terminate_hook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\thread.o(i.thread_terminate_hook))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[23c]"></a>ticker_insert_event_us</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = ticker_insert_event_us &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>

<P><STRONG><a name="[10]"></a>ticker_irq_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ticker_irq_handler &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.data)
</UL>
<P><STRONG><a name="[318]"></a>ticker_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = ticker_read &rArr;  ticker_read_us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[197]"></a>ticker_read_us</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>

<P><STRONG><a name="[23e]"></a>ticker_remove_event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ticker_remove_event &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[240]"></a>ticker_set_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[58]"></a>timer_irq_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.init_16bit_timer)
</UL>
<P><STRONG><a name="[85]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>us_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>us_ticker_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_init))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[319]"></a>us_ticker_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[83]"></a>us_ticker_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_read))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>wait</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_wait_api_rtos.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wait &rArr; wait_us &rArr; rtos::Thread::wait(unsigned) &rArr; osDelay &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_thread()
</UL>

<P><STRONG><a name="[219]"></a>wait_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_wait_api_rtos.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wait_ms &rArr; wait_us &rArr; rtos::Thread::wait(unsigned) &rArr; osDelay &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GPS::begin(int)
</UL>

<P><STRONG><a name="[2c3]"></a>wait_us</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\mbed_wait_api_rtos.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wait_us &rArr; rtos::Thread::wait(unsigned) &rArr; osDelay &rArr; EvrRtxThreadError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[29b]"></a>write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[38]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[213]"></a>SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\fatfilesystem.o(t._ZN12SingletonPtrIN4rtos5MutexEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::unlock()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
</UL>

<P><STRONG><a name="[52]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::Transaction() &rArr; mbed::transaction_t::transaction_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[37b]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev), UNUSED)

<P><STRONG><a name="[7b]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::~Transaction() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev)
</UL>
<P><STRONG><a name="[37c]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev), UNUSED)

<P><STRONG><a name="[53]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[37d]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev), UNUSED)

<P><STRONG><a name="[ae]"></a>void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[b0]"></a>void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[af]"></a>void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[236]"></a>mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
</UL>

<P><STRONG><a name="[37e]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_), UNUSED)

<P><STRONG><a name="[23a]"></a>mbed::Callback&lang;void(int)&rang;::~Callback()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::~I2C()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()
</UL>

<P><STRONG><a name="[37f]"></a>mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEED1Ev), UNUSED)

<P><STRONG><a name="[b1]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[b3]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[b2]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[180]"></a>mbed::Callback&lang;void()&rang;::Callback(void(*)())</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func4&rang;
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_threadI2C_cpp_misensor
</UL>

<P><STRONG><a name="[380]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_), UNUSED)

<P><STRONG><a name="[1f2]"></a>mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>

<P><STRONG><a name="[381]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_), UNUSED)

<P><STRONG><a name="[4a]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void()&rang;)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_thread()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
</UL>
<P><STRONG><a name="[382]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\arm_hal_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[232]"></a>mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFvvEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&) &rArr; mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[47]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[4c]"></a>CThunk&lang;mbed::I2C&rang;::trampoline(mbed::I2C*, void*, void(mbed::I2C::**)(void*))</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\i2c.o(t._ZN6CThunkIN4mbed3I2CEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunk&lang;mbed::I2C&rang;::trampoline(mbed::I2C*, void*, void(mbed::I2C::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[230]"></a>mbed::Callback&lang;void(int)&rang;::call(int) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEE4callEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::call(int) const &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[22f]"></a>mbed::Callback&lang;void(int)&rang;::operator bool() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[22c]"></a>mbed::Callback&lang;void()&rang;::operator bool() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\at_cellularsms.o(t._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(deqf.o)(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[31c]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(deqf.o)(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(drlef.o)(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[31d]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(drlef.o)(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fmul.o)(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANALOG_thread()
</UL>

<P><STRONG><a name="[383]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(fmul.o)(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[c8]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[cc]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[14e]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(scanf1.o)(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[16e]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(scanf2.o)(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[16d]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(scanf2.o)(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2b1]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[2bd]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_enable
</UL>

<P><STRONG><a name="[2bc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_err_enable
</UL>

<P><STRONG><a name="[55]"></a>i2c1_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\i2c_api.o(i.i2c1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = i2c1_irq &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_api.o(i.i2c_get_irq_handler)
</UL>
<P><STRONG><a name="[56]"></a>i2c2_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\i2c_api.o(i.i2c2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = i2c2_irq &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_api.o(i.i2c_get_irq_handler)
</UL>
<P><STRONG><a name="[57]"></a>i2c3_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\i2c_api.o(i.i2c3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = i2c3_irq &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_api.o(i.i2c_get_irq_handler)
</UL>
<P><STRONG><a name="[2cf]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_board.o(i.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[28a]"></a>os_kernel_is_active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[2b6]"></a>are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(i.are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>

<P><STRONG><a name="[2a8]"></a>handle_error</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, .\build\mbed_error.o(i.handle_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = handle_error &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[2a9]"></a>print_error_report</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, .\build\mbed_error.o(i.print_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = print_error_report &rArr;  mbed_error_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[28d]"></a>_gpio_init_out</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(i._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[28f]"></a>gpio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(i.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[204]"></a>get_console(int)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z11get_consolei))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
</UL>

<P><STRONG><a name="[20d]"></a>singleton_unlock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[211]"></a>handle_open_errors(int, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = handle_open_errors(int, unsigned) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[212]"></a>reserve_filehandle()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18reserve_filehandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = reserve_filehandle() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::bind_to_fd(mbed::FileHandle*)
</UL>

<P><STRONG><a name="[216]"></a>get_fhc(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z7get_fhci))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = get_fhc(int) &rArr; get_console(int) &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr;  serial_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[186]"></a>error_msg</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, .\build\mbed_rtx_handlers.o(i.error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = error_msg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>

<P><STRONG><a name="[f]"></a>default_idle_hook()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = default_idle_hook() &rArr; sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data)
</UL>
<P><STRONG><a name="[2a2]"></a>compute_tick</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(i.compute_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compute_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[2ca]"></a>initialize</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[2cc]"></a>schedule_interrupt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[2cb]"></a>update_present_time</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[306]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\pinmap.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[311]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\pinmap.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
</UL>

<P><STRONG><a name="[307]"></a>stm_pin_PullConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\pinmap.o(i.stm_pin_PullConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm_pin_PullConfig &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[2d5]"></a>IsIrqMasked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2d4]"></a>IsIrqMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_delay.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[5d]"></a>svcRtxDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[2d8]"></a>IsIrqMasked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2d7]"></a>IsIrqMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[5e]"></a>svcRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[5f]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[60]"></a>svcRtxKernelStart</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[2db]"></a>IsIrqMasked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2da]"></a>IsIrqMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2dc]"></a>MessageQueueGet</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2e9]"></a>MessageQueuePut</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\build\rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2e4]"></a>MessageQueueRemove</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[77]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[61]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[62]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[63]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[2e2]"></a>IsIrqMasked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[2e1]"></a>IsIrqMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[64]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[65]"></a>svcRtxMutexDelete</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[66]"></a>svcRtxMutexNew</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMutexNew &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[67]"></a>svcRtxMutexRelease</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[301]"></a>IsIrqMasked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[300]"></a>IsIrqMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[2ee]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[302]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[78]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[6b]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[2eb]"></a>isr_queue_get</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, .\build\rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2ed]"></a>isr_queue_put</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, .\build\rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[305]"></a>IsIrqMasked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[304]"></a>IsIrqMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[2f8]"></a>ThreadFlagsCheck</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[2f2]"></a>osRtxThreadBlock</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[2fc]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[2fd]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[2f4]"></a>osRtxThreadFree</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[7a]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxThreadExit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxThreadGetId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[71]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[2ff]"></a>TimerInsert</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, .\build\rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[6a]"></a>osRtxTimerTick</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[2a7]"></a>debug</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, .\build\serial_api.o(i.debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = debug &rArr; vfprintf &rArr; _printf_char_file &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; mbed_error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[30f]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_device.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[30e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\serial_device.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[76]"></a>lpuart1_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.lpuart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lpuart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[72]"></a>uart1_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[73]"></a>uart2_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[74]"></a>uart4_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart4_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart4_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[75]"></a>uart5_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart5_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart5_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[2cd]"></a>uart_irq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\build\serial_device.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_index
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_irq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_irq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_irq
</UL>

<P><STRONG><a name="[48]"></a>&lang;Func4&rang;</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serialbase.o(i.<Func4>))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = &lang;Func4&rang;
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[b4]"></a>__sti___7_SPI_cpp_ab1f1164</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___7_SPI_cpp_ab1f1164 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[181]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[183]"></a>ADC_Enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = ADC_Enable &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[44]"></a>I2C_DMAAbort</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = I2C_DMAAbort &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[1c7]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Disable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[19d]"></a>I2C_Enable_IRQ</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Receive_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[1cb]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1c6]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITAddrCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[19b]"></a>I2C_ITError</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1c9]"></a>I2C_ITListenCplt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITListenCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_ITListenCplt &rArr; HAL_I2C_ListenCpltCallback &rArr; HAL_I2C_EnableListen_IT &rArr; I2C_Enable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[1ca]"></a>I2C_ITMasterCplt</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITMasterCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = I2C_ITMasterCplt &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[1cf]"></a>I2C_ITMasterSequentialCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITMasterSequentialCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_ITMasterSequentialCplt &rArr; HAL_I2C_MasterTxCpltCallback &rArr; HAL_I2C_Master_Sequential_Receive_IT &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[1d0]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITSlaveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
</UL>

<P><STRONG><a name="[1d3]"></a>I2C_ITSlaveSequentialCplt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_ITSlaveSequentialCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITSlaveSequentialCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[42]"></a>I2C_Master_ISR_DMA</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = I2C_Master_ISR_DMA &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
</UL>
<P><STRONG><a name="[40]"></a>I2C_Master_ISR_IT</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Master_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = I2C_Master_ISR_IT &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Receive_IT)
<LI> stm32l0xx_hal_i2c.o(i.HAL_I2C_Master_Sequential_Transmit_IT)
</UL>
<P><STRONG><a name="[43]"></a>I2C_Slave_ISR_DMA</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = I2C_Slave_ISR_DMA &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_i2c.o(i.I2C_Enable_IRQ)
</UL>
<P><STRONG><a name="[3f]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_Slave_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_I2C_ErrorCallback &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l0xx_hal_i2c.o(i.HAL_I2C_EnableListen_IT)
<LI> stm32l0xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[1a6]"></a>I2C_TransferConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, .\build\stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Receive_IT
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[1b3]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1b6]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, .\build\stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1b8]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[41]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1bb]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>UART_Receive_IT</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>__sti___8_main_cpp_pc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\main.o(i.__sti___8_main_cpp_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_pc &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[b6]"></a>__sti___16_threadANALOG_cpp_soilmois</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, .\build\threadanalog.o(i.__sti___16_threadANALOG_cpp_soilmois))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = __sti___16_threadANALOG_cpp_soilmois &rArr; mbed::AnalogIn::AnalogIn(PinName) &rArr; analogin_init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threadanalog.o(.init_array)
</UL>
<P><STRONG><a name="[b7]"></a>__sti___13_threadGPS_cpp_469c9a64</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\build\threadgps.o(i.__sti___13_threadGPS_cpp_469c9a64))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = __sti___13_threadGPS_cpp_469c9a64 &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threadgps.o(.init_array)
</UL>
<P><STRONG><a name="[b8]"></a>__sti___13_threadI2C_cpp_misensor</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, .\build\threadi2c.o(i.__sti___13_threadI2C_cpp_misensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = __sti___13_threadI2C_cpp_misensor &rArr; mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; i2c_frequency &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned, unsigned char*, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threadi2c.o(.init_array)
</UL>
<P><STRONG><a name="[fb]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(h1_alloc_mt.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[121]"></a>_freopen_locked</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr; mbed_error_printf &rArr; mbed_error_vfprintf &rArr;  core_util_critical_section_exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[12d]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[12c]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[13f]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(strtod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[169]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(scanf_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[170]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[172]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_p.l(btod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[148]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[168]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
